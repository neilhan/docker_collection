set hlsearch
set ic
set nocompatible
set encoding=utf-8
filetype off
" " enable spell
" setlocal spell spelllang=en_us
" " zg will add the word
set spellfile=$HOME/.vim/myspellfile.add
" default copy to clipboard
set clipboard+=unnamedplus
" enable better mouse
set mouse=a

" this is my add new line key mapping
" nmap <S-Enter> O<Esc>
" nmap <CR> o<Esc>
set number relativenumber

" file search
set path+=**

set wildmenu

" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" cursor position
au BufLeave * let b:winview = winsaveview()
au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif

" ctags
command! MakeTags !ctags -R --exclude=.git --exclude=model --exclude=docker .
function! DelTagOfFile(file)
  let fullpath = a:file
  let cwd = getcwd()
  let tagfilename = cwd . "/tags"
  let f = substitute(fullpath, cwd . "/", "", "")
  let f = escape(f, './')
  let cmd = 'sed -i "/' . f . '/d" "' . tagfilename . '"'
  let resp = system(cmd)
endfunction

function! UpdateTags()
  let f = expand("%:p")
  let cwd = getcwd()
  let tagfilename = cwd . "/tags"
  let cmd = 'ctags -a -f ' . tagfilename . ' --c++-kinds=+p --fields=+iaS --extra=+q ' . '"' . f . '"'
  call DelTagOfFile(f)
  let resp = system(cmd)
endfunction
autocmd BufWritePost *.java,*.py,*.jsx,*.js,*.hs,*.cljs,*.clj call UpdateTags()

" bundle plugin manager
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" let Vundle manage Vundle, required!
Bundle 'gmarik/vundle'

" nerdtree
Bundle 'scrooloose/nerdtree'
" " auto open
" autocmd vimenter * NERDTree
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" autocmd GuiEnter * silent NERDTree
" autocmd VimEnter * silent NERDTree
" same tree

" auto open
" autocmd TabEnter * silent exe MirrorNerdTreeIfOneWindow()

" toggle nerdtree
map <leader>e :NERDTreeToggle<CR>
" find current file
nmap <leader>t :NERDTreeFind<CR>
" when having just one window in the tab, auto close if is the last
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" automatic NERDTree mirroring on tab switching
function MirrorNerdTreeIfOneWindow()
  if winnr("$") < 2
    NERDTreeMirror
    " hack to move the focus from the NERDTree to the main window
    wincmd p
    wincmd l
  endif
endfunction

""  status bar
"Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
"" Powerline setup
"set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
"set laststatus=2
"" Powerline setup ends

" airline replace powerline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" enable folding, <za>
set foldmethod=indent
set foldlevel=99
"
" using 4 spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" auto-indentation for python
au BufNewFile,BufRead *.py
    \ set tabstop=4 softtabstop=4 shiftwidth=4 expandtab fileformat=unix
" \  autoindent \  textwidth=79
Plugin 'vim-scripts/indentpython.vim'

" auto indentation for js, html, css
au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=4 softtabstop=4 shiftwidth=4

" autocomplete
" goto buffer command: 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab', 'new-or-existing-tab'
Bundle 'Valloric/YouCompleteMe'
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_goto_buffer_command='new-or-existing-tab'
if !empty($CONDA_PREFIX)
    let g:ycm_python_binary_path=$CONDA_PREFIX . "/bin/python"
endif
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" color code for python
let python_highlight_all=1
syntax on
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/base16-vim'
Plugin 'gosukiwi/vim-atom-dark'
Plugin 'ayu-theme/ayu-vim'

" colorscheme afterglow
Plugin 'rafi/awesome-vim-colorschemes'
colorscheme afterglow

" auto-pairs
Plugin 'jiangmiao/auto-pairs'

" rainbow parantheses
Plugin 'kien/rainbow_parentheses.vim'
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" markdown
" c-m, file:///tmp/vim-markdown-preview.html
" https://github.com/JamshedVesuna/vim-markdown-preview
Plugin 'JamshedVesuna/vim-markdown-preview'
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_browser='Google Chrome'

" file fuzzy search with fzf, Files, Buff, c-x, c-l
Plugin 'junegunn/fzf.vim'
" line complete
imap <c-x><c-l> <plug>(fzf-complete-line)

" ack replacing grep
Plugin 'mileszs/ack.vim'

" Lint syntastic ALE Async Lint Engine
Plugin 'w0rp/ale'
" run right after open
let g:ale_lint_on_enter = 0
" after save, default when idle 200ms
"let g:ale_lint_on_text_changed = 'never'
nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>

" git related
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'

" language packs for vim
Plugin 'sheerun/vim-polyglot'

" change quote surround: cs"' or cs"<q>
Plugin 'tpope/vim-surround'
" allow repeat to cs when .
Plugin 'tpope/vim-repeat'

" unimpaired
Plugin 'tpope/vim-unimpaired'
" comment, gcc, gc5j,
Plugin 'vim-scripts/tComment' "Comment easily with gcc

" debugging related
" -------------------------------
" Vebugger requires vimproc plugin
Plugin 'Shougo/vimproc.vim'
" debugger, support gdb, lldb, jdb, mdbg, pdb, rdebug, Node Ninspect
Plugin 'idanarye/vim-vebugger'
